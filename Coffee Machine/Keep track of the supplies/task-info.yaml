type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring coffee into the cup");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/utility/Input.java
  visible: true
  text: |
    package machine.utility;

    import java.util.Scanner;

    /**
     * A class with reusable static methods for user input, file input
     *
     * @author Zaid Neurothrone
     */
    public class Input
    {
        static Scanner scanner = new Scanner(System.in);

        public static String getString()
        {
            return scanner.nextLine();
        }

        /**
         * Scans for an integer from user input by the user until
         * a valid one is entered and returns it
         *
         * @return the integer entered by the user
         */
        public static int getInt()
        {
            int userInput = Integer.MIN_VALUE;

            while (true)
            {
                if (scanner.hasNextInt())
                {
                    userInput = scanner.nextInt();
                    break;
                }
                else
                {
                    scanner.nextLine();
                    System.out.println("[Error]: That is not an integer. Try again.");
                }
            }
            return userInput;
        }

        /**
         * Scans for an integer from user input in a range specified
         * by the user until a valid one is entered and returns it
         *
         * @param aMin the minimum allowed int to scan for
         * @param aMax the maximum allowed int to scan for
         * @return the integer entered by the user
         */
        public static int getInt(int aMin, int aMax)
        {
            int userInput = Integer.MIN_VALUE;

            while (userInput < aMin || userInput > aMax)
            {
                if (scanner.hasNextInt())
                {
                    userInput = scanner.nextInt();

                    if (userInput < aMin || userInput > aMax)
                    {
                        System.out.println("[Error]: Enter only an integer in the range " + aMin + " to " + aMax  + ".");
                    }
                }
                else
                {
                    scanner.nextLine();
                    System.out.println("[Error]: That is not an integer. Try again.");
                }
            }
            return userInput;
        }
    }
  learner_created: true
- name: src/machine/Machine.java
  visible: true
  text: |
    package machine;

    import machine.utility.Input;

    /**
     * A class that represents a Coffee Machine and
     * its expected functionalities
     *
     * @author Zaid Neurothrone
     */
    public class Machine
    {
        public class Menu
        {
            static final String BUY = "buy";
            static final String FILL = "fill";
            static final String TAKE = "take";
        }

        public class Beverage
        {
            static final int ESPRESSO = 1;
            static final int LATTE = 2;
            static final int CAPPUCCINO = 3;
        }

        // region Fields

        final private int WATER_PER_CUP = 200;
        final private int MILK_PER_CUP = 50;
        final private int BEANS_PER_CUP = 15;

        private int myWaterCapacity;
        private int myMilkCapacity;
        private int myBeanCapacity;
        private int myCupCapacity;
        private int myMoney;

        // endregion

        // region Constructors

        /**
         * Default constructor
         */
        public Machine()
        {
            myWaterCapacity = 0;
            myMilkCapacity = 0;
            myBeanCapacity = 0;
            myCupCapacity = 0;
            myMoney = 0;
        }

        /**
         * Parameterized constructor
         *
         * @param aWaterCapacity int: the amount of water the machine has (ml)
         * @param aMilkCapacity int: the amount of milk the machine has (ml)
         * @param aBeanCapacity int: the amount of beans the machine has (g)
         * @param aCupCapacity int: the amount of disposable cups the machine has
         * @param aMoney int: the amount of money stored in the machine
         */
        public Machine(int aWaterCapacity, int aMilkCapacity, int aBeanCapacity,
                       int aCupCapacity, int aMoney)
        {
            myWaterCapacity = aWaterCapacity;
            myMilkCapacity = aMilkCapacity;
            myBeanCapacity = aBeanCapacity;
            myCupCapacity = aCupCapacity;
            myMoney = aMoney;
        }

        // endregion

        // region Properties

        public int getWaterCapacity() { return myWaterCapacity; }
        public void setWaterCapacity(int aAmount)
        {
            if (aAmount >= 0)
            {
                myWaterCapacity = aAmount;
            }
        }

        public int getMilkCapacity() { return myMilkCapacity; }
        public void setMilkCapacity(int aAmount)
        {
            if (aAmount >= 0)
            {
                myMilkCapacity = aAmount;
            }
        }

        public int getBeanCapacity() { return myBeanCapacity; }
        public void setBeanCapacity(int aAmount)
        {
            if (aAmount >= 0)
            {
                myBeanCapacity = aAmount;
            }
        }

        public int getCupCapacity() { return myCupCapacity; }
        public void setCupCapacity(int aAmount)
        {
            if (aAmount >= 0)
            {
                myCupCapacity = aAmount;
            }
        }

        public int getMoney() { return myMoney; }
        public void setMoney(int aAmount)
        {
            if (aAmount >= 0)
            {
                myMoney = aAmount;
            }
        }

        // endregion

        private int getCoffeeCups()
        {
            int cups = 0;

            while (myWaterCapacity >= WATER_PER_CUP && myMilkCapacity >= MILK_PER_CUP && myBeanCapacity >= BEANS_PER_CUP)
            {
                ++cups;
                myWaterCapacity -= WATER_PER_CUP;
                myMilkCapacity -= MILK_PER_CUP;
                myBeanCapacity -= BEANS_PER_CUP;
            }

            return cups;
        }

        public void hasSuppliesFor(int aCupsToMake)
        {
            int maxCups = getCoffeeCups();

            if (aCupsToMake > maxCups)
            {
                System.out.println("No, I can make only " + maxCups + " cup(s) of coffee");
            }
            else if (aCupsToMake == maxCups)
            {
                System.out.println("Yes, I can make that amount of coffee");
            }
            else
            {
                final int extraCups = maxCups - aCupsToMake;
                System.out.println("Yes, I can make that amount of coffee (and even " + extraCups + " more than that)");
            }
        }

        public void printInventory()
        {
            System.out.println("The coffee machine has:");
            System.out.println(getWaterCapacity() + " of water");
            System.out.println(getMilkCapacity() + " of milk");
            System.out.println(getBeanCapacity() + " of coffee beans");
            System.out.println(getCupCapacity() + " of disposable cups");
            System.out.println(getMoney() + " of money");
        }

        public void getAction()
        {
            System.out.println("Write action (buy, fill, take):");
            String userInput = Input.getString();

            switch (userInput)
            {
                case Menu.BUY:
                    buyBeverage();
                    break;
                case Menu.FILL:
                    fillInventory();
                    break;
                case Menu.TAKE:
                    takeMoney();
                    break;
                default:
                    break;
            }
        }

        private void buyBeverage()
        {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            int userInput = Input.getInt();

            switch (userInput)
            {
                case Beverage.ESPRESSO:
                    buyEspresso();
                    break;
                case Beverage.LATTE:
                    buyLatte();
                    break;
                case Beverage.CAPPUCCINO:
                    buyCappuccino();
                    break;
                default:
                    break;
            }
        }

        private void buyEspresso()
        {
            final int waterCost = 250;
            final int beanCost = 16;
            final int moneyCost = 4;

            canPurchase(waterCost, 0, beanCost, moneyCost);
        }

        private void buyLatte()
        {
            final int waterCost = 350;
            final int milkCost = 75;
            final int beanCost = 20;
            final int moneyCost = 7;

            canPurchase(waterCost, milkCost, beanCost, moneyCost);
        }

        private void buyCappuccino()
        {
            final int waterCost = 200;
            final int milkCost = 100;
            final int beanCost = 12;
            final int moneyCost = 6;

            canPurchase(waterCost, milkCost, beanCost, moneyCost);
        }

        private boolean canPurchase(int aWaterCost, int aMilkCost, int aBeanCost, int aMoneyCost)
        {
            if (aWaterCost > myWaterCapacity || aMilkCost > myMilkCapacity || aBeanCost > myBeanCapacity || myCupCapacity < 1)
            {
                return false;
            }

            myMoney += aMoneyCost;
            --myCupCapacity;
            myWaterCapacity -= aWaterCost;
            myMilkCapacity -= aMilkCost;
            myBeanCapacity -= aBeanCost;

            return true;
        }

        private void fillInventory()
        {
            final int minCapacity = 0;
            final int maxCapacity = 1_000_000;

            System.out.println("Write how many ml of water do you want to add:");
            int waterToAdd = Input.getInt(minCapacity, maxCapacity);
            setWaterCapacity(getWaterCapacity() + waterToAdd);

            System.out.println("Write how many ml of milk do you want to add:");
            int milkToAdd = Input.getInt(minCapacity, maxCapacity);
            setMilkCapacity(getMilkCapacity() + milkToAdd);

            System.out.println("Write how many grams of coffee beans do you want to add:");
            int beansToAdd = Input.getInt(minCapacity, maxCapacity);
            setBeanCapacity(getBeanCapacity() + beansToAdd);

            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int cupsToAdd = Input.getInt(minCapacity, maxCapacity);
            setCupCapacity(getCupCapacity() + cupsToAdd);
        }

        private void takeMoney()
        {
            System.out.println("I gave you $" + myMoney);
            setMoney(0);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 26 Jan 2021 22:15:56 UTC
record: -1
